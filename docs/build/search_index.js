var documenterSearchIndex = {"docs":
[{"location":"#Proportions","page":"Home","title":"Proportions","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The best Proportions package.","category":"page"},{"location":"#Package-Features","page":"Home","title":"Package Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Provides functions to provide proportionality for vector data","category":"page"},{"location":"#Function-Documentation","page":"Home","title":"Function Documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Modules = [Proportions]\r\nOrder   = [:function, :type]","category":"page"},{"location":"#Proportions.get_proportion_round_sq-Tuple{Vector{Float64}}","page":"Home","title":"Proportions.get_proportion_round_sq","text":"get_proportion_round_sq(for_prop_arr::Array{Float64, 1};round_digits::Int64)::Array{Float64, 1}\n\nCompute the proportional values for each element in the array and round to a specified decimal digits. If the sum of all the elements is not 1 , then square the array and try looking for proportional correctness after 2 itterations , the adjustment is done in the 1st largest element returns a Array{BigFloat, 1}\n\nExample\n\njulia> get_proportion_round([1.33,1.33,1.23,1.1111],round_digits=2)\n=[0.26, 0.27, 0.25, 0.22]\n\n\n\n\n\n","category":"method"}]
}
