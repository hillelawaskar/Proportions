var documenterSearchIndex = {"docs":
[{"location":"#Proportions","page":"Home","title":"Proportions","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The best Proportions package.","category":"page"},{"location":"#Package-Features","page":"Home","title":"Package Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Provides functions to provide proportionality for vector data","category":"page"},{"location":"#Documentation","page":"Home","title":"Documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = Proportions\r\nDocTestSetup = quote\r\n    using Proportions\r\nend","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [Proportions]","category":"page"},{"location":"#Proportions.get_proportion-Tuple{AbstractVector{Float64}}","page":"Home","title":"Proportions.get_proportion","text":"get_proportion(for_prop_arr::Array{Float64, 1})::Array{Float64, 1}\n\nCompute the proportional values for each element in the array. returns a Array{Float64, 1}\n\nExample\n\njulia> get_proportion([1.0,2.0,3.0,4.0,5.0,34.0000034,2423,5656.98988])\n[0.00012301651427098885, 0.0002460330285419777, 0.00036904954281296654, 0.0004920660570839554, 0.0006150825713549442, 0.004182561903469769, 0.298069014078606, 0.6959031763038594]\n\n\n\n\n\n","category":"method"},{"location":"#Proportions.get_proportion_round-Tuple{AbstractVector{Float64}}","page":"Home","title":"Proportions.get_proportion_round","text":"get_proportion_round(for_prop_arr::Array{Float64, 1};round_digits::Int64)::Array{Float64, 1}\n\nCompute the proportional values for each element in the array and round to a specified decimal digits. If the sum of all the elements is not 1 , then the adjustment is done in the 1st largest element returns a Array{BigFloat, 1}\n\nExample\n\njulia> get_proportion_round([1.33,1.33,1.23,1.1111],round_digits = 2)\n=[0.26, 0.27, 0.25, 0.22]\n\n\n\n\n\n","category":"method"},{"location":"#Proportions.get_proportion_round_add1251-Tuple{AbstractVector{Float64}}","page":"Home","title":"Proportions.get_proportion_round_add1251","text":"get_proportion_round_add1251(for_prop_arr::Array{Float64, 1};round_digits::Int64)::Array{Float64, 1}\n\nCompute the proportional values for each element in the array and round to a specified decimal digits. If the sum of all the elements is not 1 , then add 1251 to the array and try looking for proportional correctness after 2 itterations , the adjustment is done in the 1st largest element returns a Array{BigFloat, 1}\n\nExample\n\njulia> get_proportion_round_add1251([1.33,1.33,1.23,1.1111],round_digits = 2)\n=[0.26, 0.27, 0.25, 0.22]\n\n\n\n\n\n","category":"method"}]
}
